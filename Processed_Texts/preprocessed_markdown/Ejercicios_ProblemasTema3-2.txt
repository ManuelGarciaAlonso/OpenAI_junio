### ğŸ”– Ejercicio 1

```markdown
- 1. Un procesador (CPU) puede interpretar y ejecutar directamente las instrucciones de un programa en:
- (a) Lenguaje de alto nivel de tipo intÃ©rprete.
- (b) Lenguaje ensamblador o en lenguaje mÃ¡quina, cualquiera de los dos.
- (c) SÃ³lo lenguaje mÃ¡quina.
- (d) En pseudocÃ³digo o en lenguaje ensamblador.
```

### ğŸ”– Ejercicio 2

```markdown
- 2. Â¿Es lo mismo un token que un lexema? Muestre algÃºn ejemplo.
```

### ğŸ”– Ejercicio 3

```markdown
- 3. Â¿El compilador es la Ãºnica utilidad necesaria para generar un programa ejecutable en una computadora?
```

### ğŸ”– Ejercicio 4

```markdown
- 4. El anÃ¡lisis lÃ©xico es una etapa de la compilaciÃ³n cuyo objetivo es:
- (a) Extraer la estructura de cada sentencia, reconociendo los componentes lÃ©xicos (tokens) del lenguaje.
- (b) Descomponer el programa fuente en sus componentes lÃ©xicos (tokens).
- (c) Extraer el significado de las distintas construcciones sintÃ¡cticas y elementos terminales.
- (d) Sintetizar el programa objeto.
```

### ğŸ”– Ejercicio 5

```markdown
- 5. El anÃ¡lisis sintÃ¡ctico es una etapa de la compilaciÃ³n cuyo objetivo es:
- (a) Extraer la estructura de cada sentencia, reconociendo los componentes lÃ©xicos (tokens) del lenguaje.
- (b) Descomponer el programa fuente en sus componentes lÃ©xicos (tokens).
- (c) Extraer el significado de las distintas construcciones sintÃ¡cticas y elementos terminales.
- (d) Sintetizar el programa objeto.
```

### ğŸ”– Ejercicio 6

```markdown
- 6. Para el siguiente cÃ³digo que aparece a la izquierda en lenguaje C++ (fichero test.cpp ), indique el nombre de  la  fase  en  la  que  el  compilador  produce  el  mensaje  de  error  que  aparece  a  la  derecha  y  explique  la naturaleza del mismo:
- a) test.cpp:9: error: expected primary-expression before ';' token
- b) test.cpp:6: error: invalid conversion from 'int' to 'char*'
- c) test.cpp:11: error: stray '\302' in program
```

### ğŸ”– Ejercicio 7

```markdown
- 7. Muestre un ejemplo a partir de una sentencia en lenguaje C++ en la que un error lÃ©xico origine un error sintÃ¡ctico derivado y otro error lÃ©xico que no derive en error sintÃ¡ctico.
```

### ğŸ”– Ejercicio 8

```markdown
- 8. Muestre un ejemplo a partir una sentencia de en lenguaje C++ en la que un error lÃ©xico origine un error sintÃ¡ctico y semÃ¡ntico derivados y otro error lÃ©xico que no los derive.
```

### ğŸ”– Ejercicio 9

```markdown
- 9. Â¿SerÃ­a siempre posible realizar la depuraciÃ³n de un archivo objeto? Razone la respuesta.
```

### ğŸ”– Ejercicio 10

```markdown
- 10. Dado  un  programa  escrito  en  lenguaje  ensamblador  de  una  arquitectura  concreta,  Â¿serÃ­a  directamente interpretable ese cÃ³digo por esa computadora? En caso contrario Â¿quÃ© habrÃ­a que hacer?
```

### ğŸ”– Ejercicio 11

```markdown
- 11. Â¿SerÃ­a necesario usar siempre el enlazador para obtener un programa ejecutable?
```

### ğŸ”– Ejercicio 12

```markdown
- 12. Dado un Ãºnico archivo objeto, Â¿podrÃ­a ser siempre un programa ejecutable y correcto simplemente aÃ±adiendo la informaciÃ³n de cabecera necesaria?

```
01 int main ( void ) 02 { 03 int i; 04 char * j; 05 06     j = i; 07 08 if (i == 0) 09         i += ; 10 11     â€¹; 12 13 return 0; 14 }
```
```

### ğŸ”– Ejercicio 13

```markdown
- 13. Dado un programa ejecutable que requiere de una biblioteca dinÃ¡mica, Â¿por quÃ© no es necesario recompilar el cÃ³digo fuente de dicho programa si se modifica la biblioteca?
```

### ğŸ”– Ejercicio 14

```markdown
- 14. Indique  en  quÃ©  fase  del  proceso  de  traducciÃ³n  y  ejecuciÃ³n  de  un  programa  se  realizarÃ¡  cada  una  de  las siguientes tareas:
- (a) Enlazar una biblioteca estÃ¡tica.
- (b) Eliminar los comentarios del cÃ³digo fuente.
- (c) Mensaje de error de que una variable no ha sido declarada.
- (d) Enlazar una biblioteca dinÃ¡mica.
```

### ğŸ”– Ejercicio 15

```markdown
- 15. Indique en quÃ© fase o fases del proceso de compilaciÃ³n de un lenguaje de programaciÃ³n de alto nivel se detectarÃ­an los siguientes errores:
- (a) Una variable no estÃ¡ definida.
- (b) Aparece un carÃ¡cter o sÃ­mbolo no esperado.
- (c) Aparecen dos identificadores consecutivos.
- (d) Aparecen dos funciones denominadas bajo el mismo nombre.
- (e) Aparece el final de un bloque de sentencias pero no el inicio del mismo.
- (f) Aparece  un  parÃ©ntesis  cerrado  y  no  se  ha  podido  emparejar  con  su  correspondiente  parÃ©ntesis abierto.
- (g) Una llamada a una funciÃ³n que no ha sido definida.
- (h) En la palabra reservada main aparece un carÃ¡cter extraÃ±o no esperado, por ejemplo maiÂ¿n .
```

### ğŸ”– Ejercicio 16

```markdown
- 16. Â¿Todo error sintÃ¡ctico origina un error semÃ¡ntico? En caso contrario, demuÃ©strelo usando algÃºn contraejemplo.
```

